// /*
// Copyright 2023 The KEDA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: operator/generated/listers/http/v1alpha1/clusterhttpscalingset.go
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -destination=operator/generated/listers/http/v1alpha1/mock/clusterhttpscalingset.go -package=mock -source=operator/generated/listers/http/v1alpha1/clusterhttpscalingset.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1alpha1 "github.com/kedacore/http-add-on/operator/apis/http/v1alpha1"
	v1alpha10 "github.com/kedacore/http-add-on/operator/generated/listers/http/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	labels "k8s.io/apimachinery/pkg/labels"
)

// MockClusterHTTPScalingSetLister is a mock of ClusterHTTPScalingSetLister interface.
type MockClusterHTTPScalingSetLister struct {
	ctrl     *gomock.Controller
	recorder *MockClusterHTTPScalingSetListerMockRecorder
}

// MockClusterHTTPScalingSetListerMockRecorder is the mock recorder for MockClusterHTTPScalingSetLister.
type MockClusterHTTPScalingSetListerMockRecorder struct {
	mock *MockClusterHTTPScalingSetLister
}

// NewMockClusterHTTPScalingSetLister creates a new mock instance.
func NewMockClusterHTTPScalingSetLister(ctrl *gomock.Controller) *MockClusterHTTPScalingSetLister {
	mock := &MockClusterHTTPScalingSetLister{ctrl: ctrl}
	mock.recorder = &MockClusterHTTPScalingSetListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterHTTPScalingSetLister) EXPECT() *MockClusterHTTPScalingSetListerMockRecorder {
	return m.recorder
}

// ClusterHTTPScalingSets mocks base method.
func (m *MockClusterHTTPScalingSetLister) ClusterHTTPScalingSets(namespace string) v1alpha10.ClusterHTTPScalingSetNamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterHTTPScalingSets", namespace)
	ret0, _ := ret[0].(v1alpha10.ClusterHTTPScalingSetNamespaceLister)
	return ret0
}

// ClusterHTTPScalingSets indicates an expected call of ClusterHTTPScalingSets.
func (mr *MockClusterHTTPScalingSetListerMockRecorder) ClusterHTTPScalingSets(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterHTTPScalingSets", reflect.TypeOf((*MockClusterHTTPScalingSetLister)(nil).ClusterHTTPScalingSets), namespace)
}

// List mocks base method.
func (m *MockClusterHTTPScalingSetLister) List(selector labels.Selector) ([]*v1alpha1.ClusterHTTPScalingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.ClusterHTTPScalingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterHTTPScalingSetListerMockRecorder) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterHTTPScalingSetLister)(nil).List), selector)
}

// MockClusterHTTPScalingSetNamespaceLister is a mock of ClusterHTTPScalingSetNamespaceLister interface.
type MockClusterHTTPScalingSetNamespaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockClusterHTTPScalingSetNamespaceListerMockRecorder
}

// MockClusterHTTPScalingSetNamespaceListerMockRecorder is the mock recorder for MockClusterHTTPScalingSetNamespaceLister.
type MockClusterHTTPScalingSetNamespaceListerMockRecorder struct {
	mock *MockClusterHTTPScalingSetNamespaceLister
}

// NewMockClusterHTTPScalingSetNamespaceLister creates a new mock instance.
func NewMockClusterHTTPScalingSetNamespaceLister(ctrl *gomock.Controller) *MockClusterHTTPScalingSetNamespaceLister {
	mock := &MockClusterHTTPScalingSetNamespaceLister{ctrl: ctrl}
	mock.recorder = &MockClusterHTTPScalingSetNamespaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterHTTPScalingSetNamespaceLister) EXPECT() *MockClusterHTTPScalingSetNamespaceListerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClusterHTTPScalingSetNamespaceLister) Get(name string) (*v1alpha1.ClusterHTTPScalingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1alpha1.ClusterHTTPScalingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterHTTPScalingSetNamespaceListerMockRecorder) Get(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterHTTPScalingSetNamespaceLister)(nil).Get), name)
}

// List mocks base method.
func (m *MockClusterHTTPScalingSetNamespaceLister) List(selector labels.Selector) ([]*v1alpha1.ClusterHTTPScalingSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", selector)
	ret0, _ := ret[0].([]*v1alpha1.ClusterHTTPScalingSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterHTTPScalingSetNamespaceListerMockRecorder) List(selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterHTTPScalingSetNamespaceLister)(nil).List), selector)
}
