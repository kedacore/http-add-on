// /*
// Copyright 2023 The KEDA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: interceptor/middleware/responsewriter_interface.go
//
// Generated by this command:
//
//	mockgen -copyright_file=hack/boilerplate.go.txt -write_generate_directive -destination=interceptor/middleware/mock_hijacker_responsewriter_test.go -package=middleware -source=interceptor/middleware/responsewriter_interface.go HijackerResponseWriter
//

// Package middleware is a generated GoMock package.
package middleware

import (
	bufio "bufio"
	net "net"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -copyright_file=hack/boilerplate.go.txt -write_generate_directive -destination=interceptor/middleware/mock_hijacker_responsewriter_test.go -package=middleware -source=interceptor/middleware/responsewriter_interface.go HijackerResponseWriter

// MockHijackerResponseWriter is a mock of HijackerResponseWriter interface.
type MockHijackerResponseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHijackerResponseWriterMockRecorder
	isgomock struct{}
}

// MockHijackerResponseWriterMockRecorder is the mock recorder for MockHijackerResponseWriter.
type MockHijackerResponseWriterMockRecorder struct {
	mock *MockHijackerResponseWriter
}

// NewMockHijackerResponseWriter creates a new mock instance.
func NewMockHijackerResponseWriter(ctrl *gomock.Controller) *MockHijackerResponseWriter {
	mock := &MockHijackerResponseWriter{ctrl: ctrl}
	mock.recorder = &MockHijackerResponseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHijackerResponseWriter) EXPECT() *MockHijackerResponseWriterMockRecorder {
	return m.recorder
}

// Header mocks base method.
func (m *MockHijackerResponseWriter) Header() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockHijackerResponseWriterMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHijackerResponseWriter)(nil).Header))
}

// Hijack mocks base method.
func (m *MockHijackerResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hijack")
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(*bufio.ReadWriter)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hijack indicates an expected call of Hijack.
func (mr *MockHijackerResponseWriterMockRecorder) Hijack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hijack", reflect.TypeOf((*MockHijackerResponseWriter)(nil).Hijack))
}

// Write mocks base method.
func (m *MockHijackerResponseWriter) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockHijackerResponseWriterMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockHijackerResponseWriter)(nil).Write), arg0)
}

// WriteHeader mocks base method.
func (m *MockHijackerResponseWriter) WriteHeader(statusCode int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteHeader", statusCode)
}

// WriteHeader indicates an expected call of WriteHeader.
func (mr *MockHijackerResponseWriterMockRecorder) WriteHeader(statusCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteHeader", reflect.TypeOf((*MockHijackerResponseWriter)(nil).WriteHeader), statusCode)
}
